<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="User">
	<select id="selectLoginUser" parameterType="String"
		resultType="com.issue.shoes.user.vo.User">
		SELECT userId, userPw
		FROM user WHERE userId = #{userId} AND
		deleteDate IS NULL;
	</select>

	<select id="selectUserById" parameterType="String"
		resultType="com.issue.shoes.user.vo.User">
		SELECT userId, userPw, userName, nickName, signupDate,
		updateDate,
		deleteDate,
		adminStatus, point, profileImage, phone,
		reportCount, reportDate
		FROM user WHERE userId = #{userId} AND
		deleteDate IS NULL;
	</select>

	<insert id="insertUser"
		parameterType="com.issue.shoes.user.vo.User">
		INSERT INTO user (userId, userPw, userName, nickName,
		phone)
		VALUES (#{userId}, #{userPw}, #{userName}, #{nickName},
		#{phone})
	</insert>

	<insert id="insertUseroauth"
		parameterType="com.issue.shoes.user.vo.User">
		INSERT INTO oauthjwt (userId, subject)
		VALUES (#{userId},
		#{userId})
	</insert>

	<insert id="insertPreference"
		parameterType="com.issue.shoes.user.vo.User">
		INSERT INTO Preference (preference1, preference2,
		preference3, userId)
		VALUES (#{preference1}, #{preference2},
		#{preference3}, #{userId})
	</insert>

	<update id="updateUser"
		parameterType="com.issue.shoes.user.vo.User">
		UPDATE user
		SET userPw = #{userPw},
		userName =
		#{userName},
		nickName = #{nickName},
		phone = #{phone},
		profileImage =
		#{profileImage}
		WHERE userId = #{userId} AND deleteDate IS NULL;
	</update>

	<update id="deleteUser" parameterType="String">
		UPDATE user
		SET deleteDate
		= NOW()
		WHERE userId = #{userId}
	</update>

	<update id="deleteUseroauth" parameterType="String">
		UPDATE OauthJwt
		SET
		deleteDate = NOW()
		WHERE userId = #{userId}
	</update>

	<!-- 모든 게시글 조회 -->
	<select id="selectcommunityAll" parameterType="String"
		resultType="CommunityBoard">
       <![CDATA[   
         SELECT
         	boardId,
         	boardTitle,
         	boardContents,
         	boardDate,
         	b.userId,
         	u.nickName,
         	(SELECT COUNT(*) FROM communityLike l WHERE l.boardId = b.boardId) AS boardLike
         	FROM communityboard b
			JOIN user u ON u.userId = b.userId
			WHERE b.userId = #{userId} AND boardDeletedate IS NULL
      ]]>
	</select>

	<select id="searchAllTradeBoard" parameterType="page"
		resultType="tradeBoard">
		SELECT A.tradeId, A.goodsCategory, A.tradeImage,
		A.tradeTitle,
		A.userId, A.tradeDate, A.tradeUpdateDate, IFNULL(B.count, 0) AS tradeLike,
		C.nickName, A.tradeStatus
		FROM tradeBoard A
		LEFT JOIN
		(SELECT tradeId,
		COUNT(*) AS count
		FROM tradeLike
		GROUP BY tradeId) B
		ON A.tradeId =
		B.tradeId
		INNER JOIN
		user C
		ON A.userId = C.userId
		WHERE A.userId =
		#{userId} AND A.tradeDeleteDate IS NULL
		ORDER BY A.tradeDate DESC
		LIMIT
		#{startPage}, #{recordSize};
	</select>

	<select id="countTradeBoard" resultType="int">
		SELECT count(*) FROM
		tradeBoard
	</select>

	<select id="searchMypagelikeTradeBoard" parameterType="page"
		resultType="tradeBoard">
		SELECT A.tradeId, A.goodsCategory, A.tradeImage,
		A.tradeTitle,
		A.userId, A.tradeDate, A.tradeUpdateDate, IFNULL(B.count, 0) AS tradeLike,
		C.nickName, A.tradeStatus
		FROM tradeBoard A
		LEFT JOIN
		(SELECT tradeId,
		COUNT(*) AS count
		FROM tradeLike
		GROUP BY tradeId) B
		ON A.tradeId =
		B.tradeId
		INNER JOIN
		user C
		ON A.userId = C.userId
		INNER JOIN
		(SELECT tradeId FROM tradelike
		WHERE userId = #{userId}) D
		ON A.tradeId = D.tradeId
		WHERE A.tradeDeleteDate IS NULL
		ORDER BY A.tradeDate DESC
		LIMIT #{startPage}, #{recordSize};
	</select>

</mapper>